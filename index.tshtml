<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="./styles.css">
</head>
<body>
    <canvas id="canvas" style="background-color: lightgray;"></canvas>
</body>
<script type="">
    const ctx = canvas.getContext("2d")!
    let x = 0
    let y = 0
    let zoom = 1
    let currentPage: IPage

    function resizeCanvas() {
        canvas.width = innerWidth
        canvas.height = innerHeight
    }

    enum TestType {
        Hover,
        Down,
        Up
    }

    enum State {
        Pressed,
        Hover,
        Default    
    }

    enum Tiles {
        Dirt,
        Grass,
        Rock,
        Sand,
        Brick,
        Water
    }

    interface IControl {
        bounds: Array<Function>
        render(): void
        hitTest(x: number, y: number, type: TestType): boolean
        onhover(): void
        onleave(): void
        onmousedown(): void
        onmouseup(): void
    }

    interface IPage {
        controls: Array<Control>
        hitTest(x: number, y: number, type: TestType): boolean
        render(): void
    }

    interface Radius {
        topLeft: number;
        topRight: number;
        bottomLeft: number;
        bottomRight: number;
    }

    class Radius implements Radius {
        constructor(tl: number, tr: (number | null) = null, bl: (number | null) = null, br: (number | null) = null) {
            this.topLeft = tl
            this.topRight = tr ?? tl
            this.bottomLeft = bl ?? tl
            this.bottomRight = br ?? tl
        }
    }

    abstract class Page implements IPage {
        controls = new Array<Control>

        hitTest(x: number, y: number, type: TestType) {
            for (let i = this.controls.length - 1; i >= 0; i--) {
                if (this.controls[i].hitTest(x, y, type)) {
                    return true
                }
            }
            
            return false
        }

        render() {
            ctx.clearRect(0, 0, canvas.width, canvas.height)
            render()

            for (let control of this.controls) {
                control.render()
            }
        }
    }

    abstract class Control implements IControl {
        state: State = State.Default
        bounds: Array<Function> = []

        onhover() {}
        onleave() {}
        onmousedown() {}
        onmouseup() {}

        hitTest(x: number, y: number, type: TestType) {
            if (type == TestType.Up && this.state == State.Pressed) {
                this.state = State.Default
                this.onmouseup()
                return true
            }
            else if ((x > this.bounds[0]() && x < this.bounds[2]())
                        && (y > this.bounds[1]() && y < this.bounds[3]())
                        && this.state != State.Pressed) {
                
                if (type == TestType.Hover && this.state != State.Hover) {
                    this.state = State.Hover
                    this.onhover()
                }
                else if (type == TestType.Down) {
                    this.state = State.Pressed
                    this.onmousedown()
                }

                return true
            }
            else if (type == TestType.Hover && this.state == State.Hover
                    || this.state == State.Pressed) {
                        
                this.state = State.Default
                this.onleave()
                return false
            }

            return false
        }

        render() {}
    }

    class RoundedRect extends Control {
        constructor(public colour: string, public border: string, public radius: Radius, x: Function, y: Function,
                    width: Function, height: Function) {
            super()
            this.bounds[0] = x
            this.bounds[1] = y
            this.bounds[2] = () => x() + width()
            this.bounds[3] = () => y() + height()
        }

        render() {
            ctx.save()
            ctx.strokeStyle = this.border
            ctx.fillStyle = this.colour
            ctx.beginPath()
            ctx.moveTo(this.bounds[0]() + this.radius.topLeft, this.bounds[1]())
            ctx.lineTo(this.bounds[2]() - this.radius.topRight, this.bounds[1]())
            ctx.quadraticCurveTo(this.bounds[2](), this.bounds[1](), this.bounds[2](), this.bounds[1]() + this.radius.topRight)
            ctx.lineTo(this.bounds[2](), this.bounds[3]() - this.radius.bottomRight)
            ctx.quadraticCurveTo(this.bounds[2](), this.bounds[3](), this.bounds[2]() - this.radius.bottomRight, this.bounds[3]())
            ctx.lineTo(this.bounds[0]() + this.radius.bottomLeft, this.bounds[3]())
            ctx.quadraticCurveTo(this.bounds[0](), this.bounds[3](), this.bounds[0](), this.bounds[3]() - this.radius.bottomLeft)
            ctx.lineTo(this.bounds[0](), this.bounds[1]() + this.radius.topLeft)
            ctx.quadraticCurveTo(this.bounds[0](), this.bounds[1](), this.bounds[0]() + this.radius.topLeft, this.bounds[1]())
            ctx.closePath()
            ctx.fill()
            ctx.stroke()
            ctx.restore()
        }
    }

    class Label extends Control {
        constructor(public text: string, x: Function, y: Function, public fontSize: number = 64, public colour = "black") {
            super()
            this.bounds[0] = x
            this.bounds[1] = y
            this.bounds[2] = () => {
                ctx.save()
                ctx.font = this.fontSize + "px serif"
                let wx = x() + ctx.measureText(this.text).width
                ctx.restore()
                return wx
            }
            this.bounds[3] = () => y() + this.fontSize
        }

        render() {
            ctx.save()
            ctx.fillStyle = this.colour
            ctx.font = this.fontSize + "px serif"
            ctx.fillText(this.text, this.bounds[0](), this.bounds[1]())
            ctx.restore()
        }
    }

    class Button extends Control {
        background: RoundedRect
        colour: string

        constructor(public text: string, x: Function, y: Function, public width = () => 256, public height = () => 64, public fontSize = 32,
            public normalColour = "lightgray", public pressedColour = "darkgrey", public hoverColour = "gainsboro") {
            super()
            this.colour = this.normalColour
            this.bounds[0] = x
            this.bounds[1] = y
            this.bounds[2] = () => x() + this.width()
            this.bounds[3] = () => y() + this.height()
            this.background = new RoundedRect(this.colour, "darkgray", new Radius(8),
                this.bounds[0], this.bounds[1], () => this.width(), () => this.height())
        }


        hitTest(x: number, y: number, type: TestType) {
            if (type == TestType.Up && this.state == State.Pressed) {
                this.state = State.Default
                this.background.colour = this.normalColour
                this.render()
                this.onmouseup()
                return true
            }
            else if ((x > this.bounds[0]() && x < this.bounds[2]())
                        && (y > this.bounds[1]() && y < this.bounds[3]())) {

                if (this.state != State.Pressed) {
                    if (type == TestType.Hover && this.state != State.Hover) {
                        this.state = State.Hover
                        this.background.colour = this.hoverColour
                        this.render()
                        this.onhover()
                    }
                    else if (type == TestType.Down) {
                        this.state = State.Pressed
                        this.background.colour = this.pressedColour
                        this.render()
                        this.onmousedown()
                    }
                }

                return true
            }
            else if (type == TestType.Hover && this.state == State.Hover
                    || this.state == State.Pressed) {
                        
                this.state = State.Default
                this.background.colour = this.normalColour
                this.render()
                this.onleave()
                return false
            }

            return false
        }

        render() {
            ctx.save()

            // Draw button background
            this.background.render()
            
            // Draw button text
            ctx.fillStyle = "#000000"
            ctx.font = this.fontSize + "px serif"
            ctx.fillText(this.text, this.bounds[0]() + 16, this.bounds[1]() + (this.height() / 2) + 16)

            ctx.restore()
        }
    }

    class MainPage extends Page {
        gameIcon: HTMLImageElement

        constructor() {
            super()
            this.controls.push(new RoundedRect("#FFFFFF", "#808080", new Radius(8), () => innerWidth / 2 - Math.min(innerWidth - 16, 400) / 2, () => innerHeight / 2 - 250, () => Math.min(innerWidth - 16, 400), () => 500))
            this.controls.push(new Label("FlatWorld", () => innerWidth / 2 - 152, () =>  innerHeight / 2 - 164))

            let playButton = new Button("Play", () => innerWidth / 2 - 128, () =>  innerHeight / 2 + 50)
            playButton.onmouseup = function() {
                currentPage = gamePage
                currentPage.render()
            }
            this.controls.push(playButton)

            let settingsButton = new Button("Settings", () => innerWidth / 2 - 128, () =>  innerHeight / 2 + 124)
            settingsButton.onmouseup = function() {
                //currentPage = settingsPage
                currentPage.render()
            }
            this.controls.push(settingsButton)

            this.gameIcon = new Image()
            this.gameIcon.src = "icon.png"
            this.gameIcon.addEventListener("load", () => this.render())
        }

        roundClip(x:number, y:number, width:number, height:number, radius:number) {
            ctx.beginPath()
            ctx.moveTo(x + radius, y)
            ctx.lineTo(x + width - radius, y)
            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)
            ctx.lineTo(x + width, y + height - radius)
            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)
            ctx.lineTo(x + radius, y + height)
            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)
            ctx.lineTo(x, y + radius)
            ctx.quadraticCurveTo(x, y, x + radius, y)
            ctx.closePath()
        }

        render() {
            super.render()

            ctx.save()
            let x = innerWidth / 2 - 128
            let y = innerHeight / 2 - 142
            this.roundClip(x, y, 256, 178, 8)
            ctx.clip()
            ctx.drawImage(this.gameIcon, x, y)
            ctx.restore()
        }
    }

    class GamePage extends Page {
        placeIcon: HTMLImageElement
        digIcon: HTMLImageElement
        inventoryIcon: HTMLImageElement

        constructor() {
            super()

            this.controls.push(new RoundedRect("#FFFFFF", "#808080", new Radius(0, 8, 0, 0), () => 0, () => innerHeight - 100, () => Math.min(innerWidth - 16, 400), () => 100))
            let placeIndicator = new RoundedRect("transparent", "transparent", new Radius(0), () => 0, () => innerHeight - 100, () => 100, () => 100)
            placeIndicator.onhover = function() {
                placeIndicator.colour = "lightgray"
                currentPage.render()
            }
            placeIndicator.onleave = function() {
                placeIndicator.colour = "transparent"
                currentPage.render()
            }
            this.controls.push(placeIndicator)
            let digIndicator = new RoundedRect("transparent", "transparent", new Radius(0), () => 100, () => innerHeight - 100, () => 100, () => 100)
            digIndicator.onhover = function() {
                digIndicator.colour = "lightgray"
                currentPage.render()
            }
            digIndicator.onleave = function() {
                digIndicator.colour = "transparent"
                currentPage.render()
            }
            this.controls.push(digIndicator)
            let inventoryIndicator = new RoundedRect("transparent", "transparent", new Radius(0), () => 200, () => innerHeight - 100, () => 100, () => 100)
            inventoryIndicator.onhover = function() {
                inventoryIndicator.colour = "lightgray"
                currentPage.render()
            }
            inventoryIndicator.onleave = function() {
                inventoryIndicator.colour = "transparent"
                currentPage.render()
            }
            this.controls.push(inventoryIndicator)

            this.placeIcon = new Image()
            this.placeIcon.src = "place.png"
            this.placeIcon.addEventListener("load", () => this.render())
            this.digIcon = new Image()
            this.digIcon.src = "dig.png"
            this.digIcon.addEventListener("load", () => this.render())
            this.inventoryIcon = new Image()
            this.inventoryIcon.src = "inventory.png"
            this.inventoryIcon.addEventListener("load", () => this.render())
        }

        render() {
            super.render()
            ctx.drawImage(this.placeIcon, 5, innerHeight - 95, 90, 90)
            ctx.drawImage(this.digIcon, 105, innerHeight - 95, 90, 90)
            ctx.drawImage(this.inventoryIcon, 205, innerHeight - 95, 90, 90)
        }
    }

    // We propogate the input from the UI (foreground) to background
    function hitTest(event: any, type: TestType) {
        if (!currentPage.hitTest(event.clientX || event.touches[0].clientX,
            event.clientY || event.touches[0].clientY, type)) {
            //Handle game input
            
        }
    }

   let chunks = new Uint8Array([21, 31])

    function render(): void {
        ctx.save()

        for (let x = 0; x < innerWidth; x += 50) {
            for (let y = 0; y < innerHeight; y += 30) {
                ctx.fillStyle = "#4f4cb0"
                ctx.fillRect(x, y, 10, 10)
                ctx.fillStyle = "#6b93d6"
                ctx.fillRect(x + 10, y, 10, 10)
                ctx.fillStyle = "#e9eff9"
                ctx.fillRect(x + 20, y, 10, 10)
                ctx.fillStyle = "#9fc164"
                ctx.fillRect(x + 30, y, 10, 10)
                ctx.fillStyle = "#FAFFAF"
                ctx.fillRect(x, y + 10, 10, 10)
                ctx.fillStyle = "#d8c596"
                ctx.fillRect(x + 10, y + 10, 10, 10)
                ctx.fillStyle = "#9F8772"
                ctx.fillRect(x + 20, y + 10, 10, 10)
                ctx.fillStyle = "#665A48"
                ctx.fillRect(x + 30, y + 10, 10, 10)
            }
        }
        ctx.restore()
    }

    var gamePage = new GamePage()
    var mainPage = new MainPage()

    currentPage = mainPage
    resizeCanvas()
    currentPage.render()

    this.addEventListener("resize", () => {
        resizeCanvas()
        currentPage.render()
    })

    canvas.addEventListener("mousedown", (event) => hitTest(event, TestType.Down))
    canvas.addEventListener("touchstart", (event) => hitTest(event, TestType.Down))
    canvas.addEventListener("mousemove", (event) => hitTest(event, TestType.Hover))
    canvas.addEventListener("touchmove", (event) => hitTest(event, TestType.Hover))
    canvas.addEventListener("mouseup", (event) => hitTest(event, TestType.Up))
    canvas.addEventListener("touchend", (event) => hitTest(event, TestType.Up))
</script>
</html>